import telebot
from telebot import types
import subprocess
from tasks_answers_link import tasks, answers, course_links, book_link

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('6532220819:AAENCSn896fwXthi2jvbw3vURVzZRUKhZTo')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üêçPython", "üë®üèª‚Äçüíª–ö—É—Ä—Å—ã", "üìö–ö–Ω–∏–≥–∏")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –∑–∞–¥–∞—á–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é \n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)
    user_data[message.chat.id] = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ö—É—Ä—Å—ã"
@bot.message_handler(func=lambda message: message.text == "üë®üèª‚Äçüíª–ö—É—Ä—Å—ã")
def courses(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = []
    for language, links in course_links.items():
        for link in links:
            buttons.append(types.InlineKeyboardButton(language, url=link))
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ö–Ω–∏–≥–∏"
@bot.message_handler(func=lambda message: message.text == "üìö–ö–Ω–∏–≥–∏")
def books(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    book_button = types.InlineKeyboardButton("üìö–ö–Ω–∏–≥–∏", url=book_link)
    markup.add(book_button)
    bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–Ω–∏–µ –∫–Ω–∏–≥:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["üêçPython"])
def choose_language(message):
    user_id = message.from_user.id
    user_data[user_id] = {'language': message.text, 'current_task_index': 0}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üåüEasy", "‚≠êÔ∏èMedium", "üî•Hard")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_level)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def choose_level(message):
    user_id = message.from_user.id
    user_data[user_id]['level'] = message.text

    language = user_data[user_id]['language']
    level = user_data[user_id]['level']

    tasks_for_level = tasks.get(language, {}).get(level, [])
    user_data[user_id]['tasks_for_level'] = tasks_for_level

    if not tasks_for_level:
        bot.send_message(message.chat.id, "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —É—Ä–æ–≤–Ω—è –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    user_data[user_id]['current_task_index'] = 0
    task_index = user_data[user_id]['current_task_index']
    task = tasks_for_level[task_index]

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, task, reply_markup=markup)
    bot.register_next_step_handler(message, process_solution)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def process_solution(message):
    global response
    user_id = message.from_user.id
    user_data[user_id]['solution'] = message.text

    language = user_data[user_id]['language']
    level = user_data[user_id]['level']
    answer = answers.get(language, {}).get(level, [])[user_data[user_id]['current_task_index']]
    solution = user_data[user_id]['solution']

    expected_output = answer.strip()

    with open("user_code.py", "w") as code_file:
        code_file.write(solution)

    try:
        result = subprocess.check_output(["python", "user_code.py"], stderr=subprocess.STDOUT, timeout=5,
                                         universal_newlines=True).strip()

        if result == expected_output:
            response = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π."
        else:
            response = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:"
            bot.send_message(user_id, response)
            bot.register_next_step_handler(message, process_solution)  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    except subprocess.TimeoutExpired:
        response = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:"
    except subprocess.CalledProcessError:
        response = "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:"
    finally:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        bot.send_message(user_id, response, reply_markup=markup)

    user_data[user_id]['current_task_index'] += 1
    current_task_index = user_data[user_id]['current_task_index']
    tasks_for_level = user_data[user_id]['tasks_for_level']

    if current_task_index < len(tasks_for_level):
        task = tasks_for_level[current_task_index]
        bot.send_message(message.chat.id, task)
        bot.register_next_step_handler(message, process_solution)
    else:
        markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        button = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="choose_language")
        markup.add(button)

        bot.send_message(user_id, "–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ú–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–ª–∞–≤–∏—à–∏ "–ú–µ–Ω—é"
@bot.callback_query_handler(func=lambda call: call.data == "choose_language")
def callback_choose_language(call):
    user_id = call.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üêçPython", "üë®üèª‚Äçüíª–ö—É—Ä—Å—ã", "üìö–ö–Ω–∏–≥–∏")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
